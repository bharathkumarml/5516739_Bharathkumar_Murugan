QUESTION : 1 : PLUS MINUS

#include <stdio.h>

int main()
{
    int arr[100], n, i;
    int pos = 0, neg = 0, zero = 0;
    
    scanf("%d", &n);

    for(i = 0; i < n; i++)
    {
        scanf("%d", &arr[i]);
    }

    for(i = 0; i < n; i++)
    {
        if(arr[i] > 0)
            pos++;
        else if(arr[i] < 0)
            neg++;
        else
            zero++;
    }

    printf("%f\n", (float)pos / n);
    printf("%f\n", (float)neg / n);
    printf("%f\n", (float)zero / n);

    return 0;
}






QUESTION : 2 : MINI - MAXI SUM

#include<stdio.h>
#include<limits.h>
int main()
{
int i,arr[5];
long long total=0;
int min = INT_MAX, max = INT_MIN;

for(i=0; i<5; i++)
 {
    scanf("%d",&arr[i]);
    total = total + arr[i];
 }
 min = arr[0];
 max = arr[0];
 
 for(i=1; i<5; i++)
 {
    if(arr[i] < min)
        min = arr[i];
    if(arr[i] > max)
        max = arr[i];
 }
 printf("%lld ", total - max);
 printf("%lld ", total - min);
return 0;
}





QUESTION : 2 : TIME CONVERSION

#include <stdio.h>

int main()
{
    int hr, min, sec;
    char meridian[3];

    
    scanf("%2d:%2d:%2d%2s", &hr, &min, &sec, meridian);

    
    if ((meridian[0] == 'P' || meridian[0] == 'p') && hr != 12)
    {
        hr += 12;
    }
    else if ((meridian[0] == 'A' || meridian[0] == 'a') && hr == 12)
    {
        hr = 0;
    }

    
    printf("%02d:%02d:%02d\n", hr, min, sec);

    return 0;
}





QUESTION : 3 : SPARSE ARRAYS

#include<stdio.h>
#include<string.h>

#define MAX_LEN 21
int main(){
    int n,q;
    scanf("%d", &n);
    
    char strings[1000][MAX_LEN];
    for(int i =0; i < n; i++){
        scanf("%s", strings[i]);
    }
    scanf("%d",&q);
    char queries[1000][MAX_LEN];
    for(int i = 0; i < q; i++){
        scanf("%s", queries[i]);
    }
    
    for(int i=0; i<q; i++){
        int count = 0;
        for (int j =0; j<n; j++){
            if(strcmp(queries[i], strings[j]) == 0){
                count++;
        }
    }
    printf("%d\n", count);
}
return 0;
}





QUESTION : 4 : LONELY INTEGER

#include<stdio.h>
int lonelyinteger(int a_count, int*a);
int main(){
    int n;
    scanf("%d",&n);
    
    int a[n];
    for(int i = 0; i<n; i++){
        scanf("%d", &a[i]);
    }
    int result = lonelyinteger(n,a);
    printf("%d\n",result);
    
    return 0;
}
int lonelyinteger(int a_count, int*a){
    int result =0;
    for(int i = 0; i < a_count; i++){
        result^= a[i];
    }
    return result;
}





QUESTION : 5 : FLIPPING BITS


#include <stdio.h>
unsigned int flippingBits(unsigned int n){
    return ~n;
}

int main(){
    int q;
    scanf("%d", &q);
    
    for(int i = 0; i<q; i++){
        unsigned int n;
        scanf("%u",&n);
        unsigned int result = flippingBits(n);
        printf("%u\n", result);
    }
    return 0;
}





QUESTION : 6 : DIAGONAL DIFFERENCE

#include <stdio.h>
#include <stdlib.h>

int diagonalDifference(int arr_rows, int arr_columns, int** arr){
    int primarySum = 0;
    int secondarySum = 0;
    
    for (int i = 0; i < arr_rows; i++){
        primarySum += arr[i][i];
        secondarySum += arr[i][arr_columns - 1 - i];
    }
    
    return abs(primarySum - secondarySum);
}
int main(){
    int n;
    scanf("%d", &n);
    
    int** arr = malloc(n*sizeof(int*));
    for(int i =0; i<n; i++){
        arr[i]= malloc(n*sizeof(int));
        for(int j = 0; j<n; j++){
            scanf("%d",&arr[i][j]);
        }
    }
    int result = diagonalDifference(n,n,arr);
    printf("%d\n",result);
    
    for(int i = 0; i<n; i++){
        free(arr[i]);
    }
    free(arr);
    
    return 0;
}





QUESTION : 7 : COUNTING SORT 1


#include <stdio.h>

#define MAX 100

int main() {
    int n;
    scanf("%d", &n);  

    int arr[n];
    int freq[MAX] = {0};  

    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
        freq[arr[i]]++; 
    }

    
    for (int i = 0; i < MAX; i++) {
        printf("%d", freq[i]);
        if (i != MAX - 1) {
            printf(" ");
        }
    }

    return 0;
}






QUESTION : 8 : PANGRAMS


#include<stdio.h>
#include<string.h>
#include<ctype.h>

char* pangrams(char* s){
    int letters[26] = {0};
    int count = 0;
    
    for (int i = 0; s[i] != '\0'; i++){
        if(isalpha(s[i])){
            int index = tolower(s[i]) - 'a';
            if(letters[index]==0){
                letters[index] = 1;
                count++;
            }
        }
    }
    if(count == 26){
        return "pangram";
    }else{
        return "not pangram";
    }
}
int main(){
    char s[1000];
    fgets(s, sizeof(s), stdin);
    
    s[strcspn(s,"\n")] = 0;
    
    printf("%s\n", pangrams(s));
    return 0;
}





QUESTION : 10 : PERMUTING TWO ARRAYS

#include<stdio.h>
#include <stdlib.h>

int cmpAsc(const void *a, const void *b){
    return(*(int*)a-*(int *)b);
}
int cmpDesc(const void *a,const void *b){
    return (*(int *)b - *(int *)a);
}
int twoArrays(int k, int A[], int B[], int n){
    qsort(A, n, sizeof(int),cmpAsc);
    qsort(B, n, sizeof(int),cmpDesc);
    
    for (int i = 0; i <n; i++){
        if (A[i] + B[i]<k){
            return 0;
        }
    }
    return 1;
}
int main(){
    int q;
    scanf("%d",&q);
    
    while (q--){
        int n, k;
        scanf("%d %d", &n, &k);
        
        int *A = malloc(n * sizeof(int));
        int *B = malloc(n * sizeof(int));
        
        for (int i = 0; i<n; i++) scanf("%d", &A[i]);
        for (int i = 0; i< n; i++)scanf("%d", &B[i]);
        
        if(twoArrays(k,A,B,n))
           printf("YES\n");
        else
            printf("NO\n");
        
        free(A);
        free(B);
    }
    return 0;
}





QUESTION : 11 : SUBARRAY DIVISION 1


#include <stdio.h>

int birthday(int s[], int n, int d, int m) {
    int count = 0;

    for (int i = 0; i <= n - m; i++) {
        int sum = 0;
        for (int j = 0; j < m; j++) {
            sum += s[i + j];
        }
        if (sum == d) {
            count++;
        }
    }

    return count;
}

int main() {
    int n;
    scanf("%d", &n);
    
    int s[n];
    for (int i = 0; i < n; i++) {
        scanf("%d", &s[i]);
    }
    
    int d, m;
    scanf("%d %d", &d, &m);

    int result = birthday(s, n, d, m);
    printf("%d\n", result);

    return 0;
}







QUESTION : 12 : XOR STRINGS 2

def strings_xor(s, t):
    res = ""
    for i in range(len(s)):
        if s[i] == t[i]:
            res += '0';
        else:
            res += '1';

    return res

s = input()
t = input()
print(strings_xor(s, t))

